- name: Validate pre playbook
  hosts: localhost
  gather_facts: true
  connection: local
  vars:
    env_type: "prod"
    region: "{{ lookup('ansible.builtin.env', 'region') }}"
    ibmcloud_api_key: "{{ lookup('ansible.builtin.env', 'ibmcloud_api_key') }}"
    pi_networks: "{{ lookup('ansible.builtin.env', 'pi_networks') | from_json }}"
    pi_ssh_public_key_name: "{{ lookup('ansible.builtin.env', 'pi_ssh_public_key_name') }}"
    pi_existing_workspace_guid: "{{ lookup('ansible.builtin.env', 'pi_existing_workspace_guid') }}"
    ibmcloud_cos_service_credentials: "{{ lookup('ansible.builtin.env', 'ibmcloud_cos_service_credentials') }}"
    ibmcloud_cos_configuration: "{{ lookup('ansible.builtin.env', 'ibmcloud_cos_configuration') }}"
    ibmcloud_cos_endpoint_url_prod: "https://s3.dal.us.cloud-object-storage.appdomain.cloud"
    ibmcloud_cos_endpoint_url_test: "https://s3.us-west.cloud-object-storage.test.appdomain.cloud"
    bastion_host_ip: "{{ lookup('ansible.builtin.env', 'bastion_host_ip') }}"
    ssh_private_key: "{{ lookup('ansible.builtin.env', 'ssh_private_key') }}"
  tasks:
    - name: Create a new IBM Cloud CLI session
      ansible.builtin.command:
        cmd: ibmcloud login --apikey {{ ibmcloud_api_key }} --no-region -a {{ 'test.cloud.ibm.com' if env_type == 'test' else 'cloud.ibm.com' }}
      register: login_output
      changed_when: false
      failed_when: "'FAILED' in login_output.stderr"
      when:
        - ibmcloud_api_key | default('') | length > 0
        - region | default('') | length > 0
      no_log: false

    - name: Debug login success
      ansible.builtin.debug:
        msg: "Successfully logged in IBM Cloud"

    - name: Capture the output of get workspace command
      ansible.builtin.command:
        cmd: ibmcloud pi ws get {{ pi_existing_workspace_guid }} --json
      register: get_ws_output
      changed_when: false
      failed_when: >
        'FAILED' in get_ws_output.stderr or
        ((get_ws_output.stdout | from_json).status | lower != 'active')
      when:
        - pi_existing_workspace_guid | default('') | length > 0
      no_log: false

    - name: Debug get_ws_output
      ansible.builtin.debug:
        msg: "get_ws_output: {{ get_ws_output.stdout }}"

    - name: Extract the CRN of the given Workspace ID (JSON fetch)
      ansible.builtin.set_fact:
        workspace_crn: "{{ (get_ws_output.stdout | from_json).details.crn }}"
      when:
        - get_ws_output is defined
        - get_ws_output.stdout | default('') | length > 0
      changed_when: false
      no_log: false

    - name: Debug Workspace ID
      ansible.builtin.debug:
        msg: "The Workspace ID {{ pi_existing_workspace_guid }} is valid. CRN: {{ workspace_crn }}"

    - name: Setting the target workspace
      ansible.builtin.command:
        cmd: ibmcloud pi ws tg {{ workspace_crn }}
      register: target_ws_output
      changed_when: false
      failed_when: "'FAILED' in target_ws_output.stderr"
      when:
        - workspace_crn | default('') | length > 0
      no_log: false

    - name: Validate the supplied Public SSH key
      ansible.builtin.command:
        cmd: ibmcloud pi ssh get {{ pi_ssh_public_key_name }} --json
      register: validate_ssh_output
      changed_when: false
      failed_when: "'FAILED' in validate_ssh_output.stderr"
      when:
        - pi_ssh_public_key_name | default('') | length > 0
      no_log: false

    - name: Debug Public SSH key
      ansible.builtin.debug:
        msg: "The Public SSH key {{ pi_ssh_public_key_name }} is valid."

    - name: Debug COS ibmcloud_cos_service_credentials
      ansible.builtin.debug:
        msg: "COS Credentials: {{ ibmcloud_cos_service_credentials }}"

    - name: Connect to the COS Instance using the API key
      ansible.builtin.shell: >
        set -o pipefail &&
        ibmcloud login --no-region --apikey {{ (ibmcloud_cos_service_credentials | from_json).apikey }}
        -a {{ 'test.cloud.ibm.com' if env_type == 'test' else 'cloud.ibm.com' }}
      register: cos_login_output
      changed_when: false
      failed_when: "'FAILED' in cos_login_output.stderr"
      when:
        - ibmcloud_cos_service_credentials | default('') | length > 0
      no_log: false

    - name: Debug COS ibmcloud_cos_configuration
      ansible.builtin.debug:
        msg: "COS Configuration: {{ ibmcloud_cos_configuration }}"

    - name: Configure COS CRN
      ansible.builtin.command:
        cmd: ibmcloud cos config set crn {{ (ibmcloud_cos_service_credentials | from_json).resource_instance_id }}
      changed_when: false
      when:
        - ibmcloud_cos_service_credentials | default('') | length > 0

    - name: Configure endpoint-url
      ansible.builtin.command:
        cmd: ibmcloud cos config set endpoint-url "{{ ibmcloud_cos_endpoint_url_test if env_type == 'test' else ibmcloud_cos_endpoint_url_prod }}"
      changed_when: false
      when:
        - ibmcloud_cos_service_credentials | default('') | length > 0

    - name: Check if the supplied COS bucket exists
      ansible.builtin.shell:
        cmd: set -o pipefail && ibmcloud cos list-buckets | grep "{{ (ibmcloud_cos_configuration | from_json).cos_bucket_name }}"
      register: cos_bucket_list_check_output
      changed_when: false
      failed_when: cos_bucket_list_check_output.stdout == ""
      when:
        - (ibmcloud_cos_configuration | from_json).cos_bucket_name | default('') | length > 0
      no_log: false

    - name: Validate that pi_networks exists and is a non-empty list
      ansible.builtin.assert:
        that:
          - pi_networks is defined
          - pi_networks | type_debug == 'list'
          - pi_networks | length > 0
        fail_msg: "pi_networks is not defined or not a valid non-empty list."
        success_msg: "pi_networks variable is defined and contains network entries."
      no_log: false

    - name: Validate structure of each network entry in pi_networks
      ansible.builtin.assert:
        that:
          - item.name is defined
          - item.id is defined
          - item.name | length > 0
          - item.id | length > 0
        fail_msg: "Each entry in pi_networks must have non-empty 'name' and 'id'. Invalid entry: {{ item }}"
        success_msg: "Network entry {{ item.name }} ({{ item.id }}) structure is valid."
      loop: "{{ pi_networks }}"
      loop_control:
        label: "{{ item.name | default('Unnamed') }}"
      no_log: false

    - name: Validate that each pi_network subnet ID exists in workspace {{ pi_existing_workspace_guid }}
      ansible.builtin.shell: >
        set -o pipefail &&
        ibmcloud pi subnet get {{ item.id }} --json
      register: subnet_check
      changed_when: false
      failed_when: >
        subnet_check.rc != 0 or
        ('FAILED' in subnet_check.stderr) or
        ((subnet_check.stdout | from_json).id is not defined)
      loop: "{{ pi_networks }}"
      loop_control:
        label: "{{ item.name }}"
      no_log: false

    - name: Debug valid pi_networks
      ansible.builtin.debug:
        msg: >
          "All pi_networks subnets validated successfully in workspace {{ pi_existing_workspace_guid }}:
           {{ pi_networks | map(attribute='name') | list }}"

    - name: Check if bastion host is reachable via ping
      ansible.builtin.command: ping -c 2 {{ bastion_host_ip }}
      register: ping_result
      changed_when: false
      failed_when: ping_result.rc != 0
      when:
        - bastion_host_ip | default('') | length > 0
      no_log: false

    - name: Create temporary private key file for bastion SSH test
      ansible.builtin.tempfile:
        state: file
        suffix: "_bastion_key"
      register: bastion_key_file
      when:
        - ssh_private_key | default('') | length > 0
      no_log: true

    - name: Write private key content to temporary file
      ansible.builtin.copy:
        dest: "{{ bastion_key_file.path }}"
        content: "{{ ssh_private_key }}"
        mode: "0600"
      when:
        - bastion_key_file.path is defined
      no_log: true

    - name: Validate SSH connectivity to bastion host using inline private key
      ansible.builtin.command: >
        ssh -o StrictHostKeyChecking=no
            -i {{ bastion_key_file.path }}
            root@{{ bastion_host_ip }} "exit"
      register: ssh_result
      changed_when: false
      failed_when: ssh_result.rc != 0
      when:
        - bastion_key_file.path is defined
        - bastion_host_ip | default('') | length > 0
      no_log: false

    - name: Remove temporary private key file
      ansible.builtin.file:
        path: "{{ bastion_key_file.path }}"
        state: absent
      when:
        - bastion_key_file.path is defined
      no_log: true

    - name: Debug Bastion Host connectivity
      ansible.builtin.debug:
        msg: "Successfully reached and authenticated to Bastion Host {{ bastion_host_ip }}"

    - name: All IBM Cloud pre-validations passed
      ansible.builtin.debug:
        msg: "IBM Cloud all validations completed successfully."
